/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/scores/year/{year}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get global high scores
		 * @description Get the high scores for a specific year
		 */
		get: operations['getGlobalHighScores'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/scores/year/{year}/event/{event}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get event high scores
		 * @description Get the high scores for a specific event
		 */
		get: operations['getEventHighScores'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** Event */
		Event: {
			/** Firstcode */
			firstCode: string;
			/** Code */
			code: string;
			/** Name */
			name: string;
			/** Weeknumber */
			weekNumber: number;
			/** Year */
			year: number;
		};
		/** EventMatch */
		EventMatch: {
			/** Number */
			number: number;
			/**
			 * Level
			 * @enum {string}
			 */
			level: 'quals' | 'playoffs';
			event: components['schemas']['Event'];
			result: components['schemas']['MatchResult'] | null;
		};
		/** HTTPValidationError */
		HTTPValidationError: {
			/** Detail */
			detail?: components['schemas']['ValidationError'][];
		};
		/** HighScoresResponse */
		HighScoresResponse: {
			/** Highscores */
			highScores: components['schemas']['EventMatch'][] | null;
		};
		/** MatchResult */
		MatchResult: {
			/**
			 * Recordheldfor
			 * Format: duration
			 */
			recordHeldFor: string;
			/** Score */
			score: number;
			/**
			 * Timestamp
			 * Format: date-time
			 */
			timestamp: string;
			/** Winningteams */
			winningTeams: number[];
		};
		/** ValidationError */
		ValidationError: {
			/** Location */
			loc: (string | number)[];
			/** Message */
			msg: string;
			/** Error Type */
			type: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	getGlobalHighScores: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @example 2025 */
				year: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HighScoresResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	getEventHighScores: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @example 2025 */
				year: number;
				/** @example CASJ */
				event: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HighScoresResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
}
